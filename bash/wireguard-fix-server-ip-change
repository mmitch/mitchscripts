#!/bin/bash
#
# wireguard-fix-server-ip-change - try to reconnect if Wireguard server IP has changed
#
# Copyright (C) 2023  Christian Garbs <mitch@cgarbs.de>
# licensed under GNU GPL v3 or later
# 
#
# fixes connection failures of Wireguard links when the server IP has changed
# (think consumer grade DSL with daily reconnect on both sides)
# DNS name -> IP resolution only happens once when bringing up the tunnel
#
# this script scans for all tunnels that are in client mode,
# tries to send a ping across and updates the endpoint IP if the ping fails
#
# run this regularly from cron, preferably around the time when the server side changes its IP
#

CFG_PATH=/etc/wireguard

## different log levels

debug() {
    # remove : to enable debug messages
    echo "DEBUG: ${interface}${interface:+: }$*"
}

info() {
    echo "${interface}${interface:+: }$*"
}

error() {
    echo "ERROR: ${interface}${interface:+: }$*" >&2
}

## functions

find_all_client_configs() {
    grep -L ^ListenPort "$CFG_PATH"/*.conf
}

get_interface_name_from_filename() {
    local tmp=${1%.conf}
    echo "${tmp##*/}"
}

get_tunnel_peer_address() {
    local interface=$1
    # yes, this can be replaced by a single sed(1) command, but it's all line noise then ;)
    LANG=C ip addr show dev $interface \
       | grep -E 'peer [0-9]{1,3}(\.[0-9]{1,3}){3}/[0-9]{1,3} scope link'  \
       | sed -e 's:^.*peer ::' -e 's:/.*$::'
}

tunnel_endpoint_is_reachable() {
    local target=$1
    ping -c 1 -W 1 "${target}" >/dev/null
}

get_peer_endpoint() {
    local config=$1
    sed -n -e '/^Endpoint/{s/^.*= *//;p}' "$config"
}

get_public_key() {
    local config=$1
    sed -n -e '/^PublicKey/{s/^PublicKey *= *//;p}' "$config"
}

## main script

for client_config in $(find_all_client_configs); do
    interface=

    debug "checking $client_config"

    interface=$(get_interface_name_from_filename "$client_config")
    debug "interface=$interface"

    if ! peer_ip=$(get_tunnel_peer_address "$interface"); then
	error "could not get peer ip address"
	continue
    fi

    debug "peer_ip=$peer_ip"

    if tunnel_endpoint_is_reachable "$peer_ip"; then
	debug "tunnel endpoint $peer_ip can be pinged, nothing to do"
	continue
    fi

    info "peer $peer_ip did not respond"

    if ! peer_endpoint=$(get_peer_endpoint "$client_config"); then
	error "could not get endpoint address"
	continue
    fi

    debug "peer_endpoint=$peer_endpoint"

    if ! public_key=$(get_public_key "$client_config"); then
	error "could not get public key"
	continue
    fi

    debug "public_key=$public_key"

    # wg will do a fresh DNS lookup even if we set the same name as before (internally it only holds the IP, not the name)
    if ! wg set "$interface" peer "$public_key" endpoint "$peer_endpoint"; then
	error "could not wg set endpoint to $peer_endpoint for peer $public_key"
	continue
    fi

    info "set peer endpoint to $peer_endpoint"
    
done
