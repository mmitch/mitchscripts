# to be sourced from ~/.alias

# finally start to use iproute2 over net-tools!
alias arp='echo "use ip n (ip neighbour) instead"'
alias ifconfig='echo "use ip a (ip addr), ip link, ip -s (ip-stats) instead"'
alias netstat='echo "use ss, ip route (for netstat -r), ip -s link (for netstat -i), ip maddr (for netstat -g) instead"'
alias route='echo "use ip r (ip route) instead"'

# can't remember these stupid commands
alias pulseaudio-DINGENS='echo "Du willst pavucontrol!"'
alias RemoteX11Thingie='echo "Du willst Xpra!"'

# tin singleton (avoid messing up read articles)
alias tin='if [ $(pidof tin) ] ; then echo "tin is already running..."; else tin; fi'

# Trogdor!
alias sbemail.exe='mutt'

# list newest files last
alias rls='ls -rt'

# copy EXIF timestamps to file timestamps
alias exifdate2filedate='exiftool -DateTimeOriginal\>FileModifyDate'

# set EXIF/IPTC/XMP/… metatags with Copyright information
alias exifaddcopyright='exiftool -mwg:copyright="Copyright $(date +%Y) Christian Garbs - http://www.cgarbs.de" -mwg:creator="Christian Garbs <mitch@cgarbs.de>"'

# find stuck wine processes
alias winegrep='ps aux | egrep "([w]ine|\.[e]xe)"'

# never start irssi without screen again
# fiddle with Perl HTTPS because of these bugs:
# - https://github.com/zigdon/twirssi/issues/75
# - https://rt.cpan.org/Public/Bug/Display.html?id=78920
alias irssi='
(
  PERL_NET_HTTPS_SSL_SOCKET_CLASS=Net::SSL
  PERL_LWP_SSL_VERIFY_HOSTNAME=0
  export PERL_LWP_SSL_VERIFY_HOSTNAME PERL_NET_HTTPS_SSL_SOCKET_CLASS
  screen -d -R -S irssi -t irssi irssi
)
'

# debsign all signable files
alias debsign-all='for I in *.dsc *.changes *.commands; do [ -e "$I" ] && debsign "$I"; done'

# show latest procmail sorted mails
alias mailtail='tail -n 300 -f /home/mitch/Mail/from | { IFS=""; read FROM; while [ ! "${FROM:0:5}" = "From " ] ; do read FROM; done; read SUBJECT; while read FOLDER; do if [ "${FOLDER:0:19}" != "  Folder: /dev/null" -a "${FOLDER:0:19}" != "  Folder: spam/new/" -a "${FOLDER:0:23}" != "  Folder: logfiles/new/" -a "${FOLDER:0:26}" != "  Folder: warpzone-ml/new/" -a "${FOLDER:0:23}" != "  Folder: omdstats/new/" ] ; then echo "$FROM"; echo "$SUBJECT"; echo "$FOLDER"; fi; read FROM; read SUBJECT; done } | /home/mitch/git/mitchscripts/perl/mimedecoder.pl | sed -e "s/^From/\nFrom/" -e "s,^\(  Folder: \)\([^/]\),\1${HOME}/Mail/\2,"'

# default start page in (e)links
# $1: URL (optional)
links()
{	
	(
		if [ -z "$*" ]; then
			/usr/bin/elinks http://www.dn.cgarbs.de/mediawiki/index.php/Hauptseite
		else
			/usr/bin/elinks "$@"
		fi
	)
}

# dump all links on a website
# $1: URL
dumpurls()
{
	lynx -dump "$@" | cut -c 7- | grep -E '^https?:'
}

# dump all pictures from an imageboard thread
# $1: URL
boardget() {
        dumpurls "$1" | egrep '\.(jpg|png|gif)$' | sort | uniq | wget -i-
}

# enable Japanese input method
# $1: command to execute
JAP()
{
	(
		XMODIFIERS="@im=kinput2"
		LC_CTYPE=ja_JP.UTF-8
		echo variables set
		export XMODIFIERS
		export LC_CTYPE
		echo variables exported
		echo -n starting kinput2
		kinput2 -xim -canna -kinput &
		echo -n .
		sleep 1
		echo -n .
		sleep 1
		echo .
		echo switching editor
		export EDITOR=jmacs
		export VISUAL=jmacs
		echo running command
		if [ -z "$@" ]; then
			x-terminal-emulator
		else
			"$@"
		fi
		echo command finished
		killall kinput2
		echo kinput2 killed
	)
}

# quick www fetch (e.g. for sites that reject wget's useragent)
# $1: URL
CHAN()
{
	GET "$1" > "$(basename "$1")"
}

# snap a window
SHOT()
{
	FILE=/tmp/shot_$(date +%Y%m%d-%H%M%S).png
	import $FILE
	echo $FILE
}

# snap the screen
SHOT_ALL()
{
	FILE=/tmp/shot_$(date +%Y%m%d-%H%M%S).png
	import -window root $FILE
	echo $FILE
}

# snap a window and publish on www
SHOT_WEB()
{
	FILE=$(SHOT)
	ari_temp $FILE
	rm $FILE
}

# snap a window and publish locally
SHOT_MITCH()
{
	FILE=$(SHOT)
	mitch_temp $FILE
	rm $FILE
}

# set window title on ssh connection
ssh()
{
	xtermset -T "ssh $*"
	/usr/bin/ssh "$@"
	xtermset -T "$USER@$HOSTNAME"
}

# lookup inside WadokuJT
# $1: word
edict()
{
	grep -hi "$@" /home/mitch/WadokuJT.txt | sensible-pager
}

# lookup in Pokédex™
# $1: search string
pokedex()
{
	( cd ~/git/pokedex; ./pokedex "$1" )
}

# play all my music sorted by album
# 'q' to jump to next album, '^c' to quit
albumplay()
{
	mount | grep -q /mnt/mp3 || mount /mnt/mp3
	(
		tty
		(
			find /mnt/mp3 -type d 2>/dev/null
			echo ..find 1>&2
		) | (
			unsort
			echo ..unsort 1>&2
		) | (
			sleep 2
			echo ..sleep 1>&2
			unsort
			echo ..unsort 1>&2
		)
	) | (
		read TTY
		while read DIR; do
			mplayer -shuffle "${DIR}"/* <$TTY
		done
	)
}

# quick way to renice and ionice a given process or everything matching a string
#
# $1: pid to nice when $1 is numerical
# $1: search pattern for pidof(8) if $1 is not numerical
# default is $$ (current process) if $1 is empty
mynice()
{
    local WHAT
    WHAT="${1:-$$}"
    if [[ $WHAT =~ ^[0-9]+$ ]] ; then
	renice 20 "$WHAT"
	ionice -c 3 -p "$WHAT"
    else
	PIDS="$(pidof "$WHAT")"
	renice 20 $PIDS
	for PID in $PIDS ; do
	    ionice -c 3 -p $PID
	done
    fi
}

# one-shot-fileserving
# $1: file to serve
#
# poor man's webserver ignoring any RFC there is
# works with netcat-openbsd, for netcat-traditional use "nc -l -p $PORT -q 1" instead
share_file_once()
{
    
    local FILE="$1"
    if [ ! -r "$FILE" ] ; then
	echo "can't read file $FILE" >2
	return 1
    fi

    local PORT=$(( 60000 + ( $RANDOM % 1000 ) ))
    local HOSTNAME=$(hostname -f)
    local MIME=$(file -b --mime-type "$FILE")

    echo "serving file on http://$HOSTNAME:$PORT/foo"

    if (echo -en "HTTP/1.1 200 OK\nContent-Type: $MIME\n\n"; cat "$FILE") | nc -l $PORT ; then
	echo "file transmitted, ok."
    else
	echo "something went wrong." >2
	return 2
    fi
    return 0
    
}

# colored man
# sauce: http://www.pcspinnt.de/2013/09/lazy-admins-using-the-shell-third-one/
if [[ -e /usr/bin/less ]]; then
	man() {
		env LESS_TERMCAP_mb=$'\E[01;31m' \
		LESS_TERMCAP_md=$'\E[01;38;5;74m' \
		LESS_TERMCAP_me=$'\E[0m' \
		LESS_TERMCAP_se=$'\E[0m' \
		LESS_TERMCAP_so=$'\E[38;5;246m' \
		LESS_TERMCAP_ue=$'\E[0m' \
		LESS_TERMCAP_us=$'\E[04;38;5;146m' \
		man "$@"
	}
fi


# conveniently grep irssi IRC logfiles
# switch to log directory and run `ircgrep <REGEXP>`
ircgrep () { zgrep -i -E -h -e '^--- Day changed' -e "$*" *.log* ; }

# copy a file via uucp to node cg1003
# $@: the file(s) to copy
#
# as the path could be source-dependent, this should be expanded for every source host
# uucp syntax is a hassle!
uucopy()
{
    case `hostname` in
	zecora)
	    TARGET='cg1003!mitch'
	    ;;
	*)
	    echo unknown source host! 1>&2
	    exit 1
	    ;;
    esac;
	
    # print log is successful
    uucp -t -C -n mitch "$@" "$TARGET" && ( uulog | tail -n 5 )
}

# clone a github repository (I always look up the syntax...)
# set up pull to use public https: (no authentication) and push to use ssh (needing authentication)
# $1: username/project to clone, eg. mmitch/mitchscripts OR complete url, e.g. https://github.com/mmitch/mitchscripts.git
github-clone() {
    repo="${1%.git}"
    repo="${repo#https://github.com/}"
    git clone "https://github.com/${repo}.git" && pushd "$(basename "${repo}")" && git remote set-url --push origin "git@github.com:${repo}" && popd
}

# reencode videos to H.264 in MKV
# small size and plays fine on my RaspberryPi, my Android Tablet and mplayer
# $*: filenames to encode
tomkv() { for FILE in "$@"; do nice -n20 ionice -c3 ffmpeg -i "$FILE" "$FILE".mkv; done }

# reminder to switch from k4dirstat to qdirstat (no KDE dependencies)
alias k4dirstat='echo "use qdirstat instead"'

# one-time ssh access without known_hosts interaction
# useful if a remote server is booted into a rescue system
alias ssh_once='ssh -o StrictHostKeyChecking=no  -o UserKnownHostsFile=/dev/null'

# call player with recursive file scanning and a shuffled but navigatable playlist
# $*: zero, one or more options followed by at least one path
mrecursive() {
    declare -a args
    while [ "${1:0:1}" = '-' ]; do
	args+=( "$1" )
	shift
    done

    # add current directory if no paths are given
    [ "$1" ] ||	set -- .

    declare -a paths
    while [ "$1" ]; do
	if [ "${1:0:1}" = '/' ]; then
	    paths+=( "$1" )
	else
	    paths+=( "$PWD/$1" )
	fi
	shift
    done

    mplayer "${args[@]}" -playlist <( find "${paths[@]}" -type f | sort -R )
}

# use youtube-dl for an audio-only download (encode to medium quality MP3)
# $*: video URLs understood by youtube-dl
youtube-audio() {
    youtube-dl -x --audio-format mp3 --audio-quality 4 "$@"
}

# combine images into a PDF
# $*: directories with images, one PDF is generated per directory
topdf()
{
    local jpegquality=95
    local maxpixels=7000000
    local dir pdf jpg finalpdf
    local -a pdfs
    echo
    for dir in "$@"; do
	dir="${dir%/}"
	finalpdf="$PWD/$dir.pdf"
	echo "processing $dir:"
	pushd "$dir" >/dev/null || return
	pdfs=()
	for jpg in *.{jpg,jpeg,JPG,JPEG}; do
	    [ -e "$jpg" ] || continue # skip unmatched extensions
	    pdf="$jpg.pdf"
	    pdfs+=("$pdf")
	    echo "  $jpg => $pdf"
	    convert "$jpg""[>@$maxpixels]" -strip -quality $jpegquality "$pdf" || return
	done
	pdfunite -- "${pdfs[@]}" "$finalpdf" || return
	ls -lh "$finalpdf"
	echo "  cleaning up"
	rm -- "${pdfs[@]}"
	popd >/dev/null || return
	echo
    done
}

# switch man over to hman if everything is installed
if [ "$(type -t hman)" = file ] && [ "$(type -t lynx)" = file ]&& [ "$(type -t lynx-for-man)" = file ]; then
    alias man=hman
    export MANHTMLPAGER=lynx-for-man
fi
